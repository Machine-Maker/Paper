# Builds a jar based on the pr branch and posts the artifact in the PR for download

name: Build Jar for PR
on:
  pull_request:
    types:
      - labeled
      - synchronize

jobs:
  build:
    if: (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'build-pr')) || (github.event.action == 'labeled' && github.event.label.name == 'build-pr')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [17]
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: JDK ${{ matrix.java }}
        uses: actions/setup-java@v3.6.0
        with:
          java-version: ${{ matrix.java }}
          cache: 'gradle'
          distribution: 'temurin'
      - name: Patch and build
        run: |
          git config --global user.email "no-reply@github.com"
          git config --global user.name "Github Actions"
          ./gradlew applyPatches --stacktrace
          ./gradlew createReobfPaperclipJar --stacktrace

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: paperclip
          path: build/libs/paper-paperclip-*-reobf.jar

  comment:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Update comment
        uses: actions/github-script@v6
        with:
          script: |
            async function upsertComment(owner, repo, issue_number, purpose, body) {
              const {data: comments} = await github.rest.issues.listComments(
                {owner, repo, issue_number});

              const marker = `<!-- bot: ${purpose} -->`;
              body = marker + "\n" + body;

              const existing = comments.filter((c) => c.body.includes(marker));
              if (existing.length > 0) {
                const last = existing[existing.length - 1];
                core.info(`Updating comment ${last.id}`);
                await github.rest.issues.updateComment({
                  owner, repo,
                  body,
                  comment_id: last.id,
                });
              } else {
                core.info(`Creating a comment in issue / PR #${issue_number}`);
                await github.rest.issues.createComment({issue_number, body, owner, repo});
              }
            }
            
            const {owner, repo} = context.repo;
            const run_id = ${{ github.run_id }};
            
            const pull_requests = ${{ toJSON(github.event.pull_request) }};
            
            const artifacts = await github.paginate(
              github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
            if (!artifacts.length) {
              return core.error(`No artifacts found`);
            }
            let body = `Download the artifacts for this pull request:\n`;
            for (const art of artifacts) {
              body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
            }

            core.info("Review thread message body:", body);

            await upsertComment(owner, repo, pull_request.number, "nightly-link", body)
