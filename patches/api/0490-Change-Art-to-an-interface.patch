From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sun, 11 Aug 2024 17:12:41 -0700
Subject: [PATCH] Change Art to an interface


diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index 9d242b24813a2b782579233abdd377241c8a2150..62e33538542e7ab3b71d57c426bede44abb5a5b2 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -10,98 +10,112 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents the art on a painting
  */
-public enum Art implements Keyed {
-    KEBAB(0, 1, 1),
-    AZTEC(1, 1, 1),
-    ALBAN(2, 1, 1),
-    AZTEC2(3, 1, 1),
-    BOMB(4, 1, 1),
-    PLANT(5, 1, 1),
-    WASTELAND(6, 1, 1),
-    POOL(7, 2, 1),
-    COURBET(8, 2, 1),
-    SEA(9, 2, 1),
-    SUNSET(10, 2, 1),
-    CREEBET(11, 2, 1),
-    WANDERER(12, 1, 2),
-    GRAHAM(13, 1, 2),
-    MATCH(14, 2, 2),
-    BUST(15, 2, 2),
-    STAGE(16, 2, 2),
-    VOID(17, 2, 2),
-    SKULL_AND_ROSES(18, 2, 2),
-    WITHER(19, 2, 2),
-    FIGHTERS(20, 4, 2),
-    POINTER(21, 4, 4),
-    PIGSCENE(22, 4, 4),
-    BURNING_SKULL(23, 4, 4),
-    SKELETON(24, 4, 3),
-    DONKEY_KONG(25, 4, 3),
-    EARTH(26, 2, 2),
-    WIND(27, 2, 2),
-    WATER(28, 2, 2),
-    FIRE(29, 2, 2),
-    BAROQUE(30, 2, 2),
-    HUMBLE(31, 2, 2),
-    MEDITATIVE(32, 1, 1),
-    PRAIRIE_RIDE(33, 1, 2),
-    UNPACKED(34, 4, 4),
-    BACKYARD(35, 3, 4),
-    BOUQUET(36, 3, 3),
-    CAVEBIRD(37, 3, 3),
-    CHANGING(38, 4, 2),
-    COTAN(39, 3, 3),
-    ENDBOSS(40, 3, 3),
-    FERN(41, 3, 3),
-    FINDING(42, 4, 2),
-    LOWMIST(43, 4, 2),
-    ORB(44, 4, 4),
-    OWLEMONS(45, 3, 3),
-    PASSAGE(46, 4, 2),
-    POND(47, 3, 4),
-    SUNFLOWERS(48, 3, 3),
-    TIDES(49, 3, 3);
+// Paper start - make interface
+public interface Art extends Keyed, org.bukkit.util.OldEnum<Art> {
+    Art KEBAB = getArt("kebab");
+    Art AZTEC = getArt("aztec");
+    Art ALBAN = getArt("alban");
+    Art AZTEC2 = getArt("aztec2");
+    Art BOMB = getArt("bomb");
+    Art PLANT = getArt("plant");
+    Art WASTELAND = getArt("wasteland");
+    Art POOL = getArt("pool");
+    Art COURBET = getArt("courbet");
+    Art SEA = getArt("sea");
+    Art SUNSET = getArt("sunset");
+    Art CREEBET = getArt("creebet");
+    Art WANDERER = getArt("wanderer");
+    Art GRAHAM = getArt("graham");
+    Art MATCH = getArt("match");
+    Art BUST = getArt("bust");
+    Art STAGE = getArt("stage");
+    Art VOID = getArt("void");
+    Art SKULL_AND_ROSES = getArt("skull_and_roses");
+    Art WITHER = getArt("wither");
+    Art FIGHTERS = getArt("fighters");
+    Art POINTER = getArt("pointer");
+    Art PIGSCENE = getArt("pigscene");
+    Art BURNING_SKULL = getArt("burning_skull");
+    Art SKELETON = getArt("skeleton");
+    Art DONKEY_KONG = getArt("donkey_kong");
+    Art EARTH = getArt("earth");
+    Art WIND = getArt("wind");
+    Art WATER = getArt("water");
+    Art FIRE = getArt("fire");
+    Art BAROQUE = getArt("baroque");
+    Art HUMBLE = getArt("humble");
+    Art MEDITATIVE = getArt("meditative");
+    Art PRAIRIE_RIDE = getArt("prairie_ride");
+    Art UNPACKED = getArt("unpacked");
+    Art BACKYARD = getArt("backyard");
+    Art BOUQUET = getArt("bouquet");
+    Art CAVEBIRD = getArt("cavebird");
+    Art CHANGING = getArt("changing");
+    Art COTAN = getArt("cotan");
+    Art ENDBOSS = getArt("endboss");
+    Art FERN = getArt("fern");
+    Art FINDING = getArt("finding");
+    Art LOWMIST = getArt("lowmist");
+    Art ORB = getArt("orb");
+    Art OWLEMONS = getArt("owlemons");
+    Art PASSAGE = getArt("passage");
+    Art POND = getArt("pond");
+    Art SUNFLOWERS = getArt("sunflowers");
+    Art TIDES = getArt("tides");
 
-    private final int id, width, height;
-    private final NamespacedKey key;
-    private static final HashMap<String, Art> BY_NAME = Maps.newHashMap();
-    private static final HashMap<Integer, Art> BY_ID = Maps.newHashMap();
+    private static Registry<Art> registry() {
+        return io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(io.papermc.paper.registry.RegistryKey.PAINTING_VARIANT);
+    }
+
+    private static Art getArt(final String id) {
+        final Art art = registry().get(NamespacedKey.minecraft(id));
+        Preconditions.checkState(art != null, "Missing art: %s", id);
+        return art;
+    }
+
+    /**
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} and {@link io.papermc.paper.registry.RegistryKey#PAINTING_VARIANT}
+     */
+    @Deprecated(since = "1.21.1", forRemoval = true)
+    static @NotNull Art valueOf(final @NotNull String name) {
+        final NamespacedKey key = NamespacedKey.fromString(name.toLowerCase(Locale.ROOT));
+        Preconditions.checkArgument(key != null, name + " does not create a valid NamespacedKey");
+        final Art art = registry().get(key);
+        Preconditions.checkArgument(art != null && key.getKey().toUpperCase(Locale.ROOT).equals(name), "No art found with the name %s", name);
+        return art;
+    }
 
-    private Art(int id, int width, int height) {
-        this.id = id;
-        this.width = width;
-        this.height = height;
-        this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
+    /**
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} and {@link io.papermc.paper.registry.RegistryKey#PAINTING_VARIANT}
+     */
+    @Deprecated(since = "1.21.1", forRemoval = true)
+    static Art[] values() {
+        return registry().stream().toArray(Art[]::new);
     }
+    // Paper end - make interface
 
     /**
      * Gets the width of the painting, in blocks
      *
      * @return The width of the painting, in blocks
      */
-    public int getBlockWidth() {
-        return width;
-    }
+    public int getBlockWidth(); // Paper - make interface
 
     /**
      * Gets the height of the painting, in blocks
      *
      * @return The height of the painting, in blocks
      */
-    public int getBlockHeight() {
-        return height;
-    }
+    public int getBlockHeight(); // Paper - make interface
 
     /**
      * Get the ID of this painting.
      *
      * @return The ID of this painting
-     * @apiNote Internal Use Only
+     * @deprecated use {@link #getKey()}
      */
-    @org.jetbrains.annotations.ApiStatus.Internal // Paper
-    public int getId() {
-        return id;
-    }
+    @Deprecated(forRemoval = true, since = "1.21.1") // Paper - deprecate
+    public int getId(); // Paper - make interface
 
     // Paper start - deprecate getKey
     /**
@@ -112,21 +126,26 @@ public enum Art implements Keyed {
     // Paper end - deprecate getKey
     @NotNull
     @Override
-    public NamespacedKey getKey() {
-        return key;
-    }
+    public NamespacedKey getKey(); // Paper - make interface
 
     /**
      * Get a painting by its numeric ID
      *
      * @param id The ID
      * @return The painting
-     * @apiNote Internal Use Only
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} and {@link io.papermc.paper.registry.RegistryKey#PAINTING_VARIANT}
      */
-    @org.jetbrains.annotations.ApiStatus.Internal // Paper
+    @Deprecated(forRemoval = true, since = "1.21.1") // Paper - deprecate
     @Nullable
     public static Art getById(int id) {
-        return BY_ID.get(id);
+        // Paper start - replace impl
+        for (final Art art : registry()) {
+            if (art.getId() == id) {
+                return art;
+            }
+        }
+        return null;
+        // Paper end - replace impl
     }
 
     /**
@@ -136,18 +155,15 @@ public enum Art implements Keyed {
      *
      * @param name The name
      * @return The painting
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} and {@link io.papermc.paper.registry.RegistryKey#PAINTING_VARIANT}
      */
     @Nullable
+    @Deprecated(since = "1.21.1") // Paper - deprecate
     public static Art getByName(@NotNull String name) {
         Preconditions.checkArgument(name != null, "Name cannot be null");
 
-        return BY_NAME.get(name.toLowerCase(Locale.ROOT));
+        return registry().get(NamespacedKey.minecraft(name.toLowerCase(Locale.ROOT))); // Paper - replace impl
     }
 
-    static {
-        for (Art art : values()) {
-            BY_ID.put(art.id, art);
-            BY_NAME.put(art.toString().toLowerCase(Locale.ROOT), art);
-        }
-    }
+    // Paper - make interface
 }
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 20015393f91af405c99db2635a471fb6ff19e4bf..daa51c6b289853b338f2929d972ca747ddb29234 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -75,8 +75,10 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Server art.
      *
      * @see Art
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} with {@link io.papermc.paper.registry.RegistryKey#PAINTING_VARIANT}
      */
-    Registry<Art> ART = new SimpleRegistry<>(Art.class);
+    @Deprecated(since = "1.21.1")
+    Registry<Art> ART = Objects.requireNonNull(io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(Art.class), "No registry present for Art. This is a bug."); // Paper
     /**
      * Attribute.
      *
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
index 102f4705f19174af138435a647cba261bb51ad36..fddd9e0ef2659c7d839dde2ad42a202967122d9e 100644
--- a/src/test/java/org/bukkit/ArtTest.java
+++ b/src/test/java/org/bukkit/ArtTest.java
@@ -5,6 +5,7 @@ import static org.hamcrest.Matchers.*;
 import static org.junit.jupiter.api.Assertions.*;
 import org.junit.jupiter.api.Test;
 
+@org.junit.jupiter.api.Disabled("implemented on server now")
 public class ArtTest {
 
     @Test
