From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 20 May 2021 01:10:54 -0700
Subject: [PATCH] Better Stats API


diff --git a/src/main/java/io/papermc/paper/event/player/PlayerRequestStatisticsEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerRequestStatisticsEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ce1b6ae06c411f0e346e3ccf5760ec5aa86e43e3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerRequestStatisticsEvent.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.event.player;
+
+import io.papermc.paper.statistic.Statistic;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the player requests their statistics.
+ */
+public class PlayerRequestStatisticsEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final Object2IntMap<Statistic<?>> statisticMap;
+    private boolean cancelled;
+
+    public PlayerRequestStatisticsEvent(@NotNull Player who, @NotNull Object2IntMap<Statistic<?>> statisticMap) {
+        super(who);
+        this.statisticMap = statisticMap;
+    }
+
+    /**
+     * Gets the statistic map to be sent to the player.
+     *
+     * @return the mutable statistic map
+     */
+    @NotNull
+    public Object2IntMap<Statistic<?>> getStatisticMap() {
+        return statisticMap;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryKey.java b/src/main/java/io/papermc/paper/registry/RegistryKey.java
index 2945dde566682f977e84fde5d473a6c69be24df1..58d0987bfd1d02c94b1bc9c6d3406e28d7e1072d 100644
--- a/src/main/java/io/papermc/paper/registry/RegistryKey.java
+++ b/src/main/java/io/papermc/paper/registry/RegistryKey.java
@@ -1,5 +1,7 @@
 package io.papermc.paper.registry;
 
+import io.papermc.paper.statistic.CustomStatistic;
+import io.papermc.paper.statistic.StatisticType;
 import net.kyori.adventure.key.Keyed;
 import org.bukkit.Art;
 import org.bukkit.Fluid;
@@ -81,6 +83,15 @@ public sealed interface RegistryKey<T> extends Keyed permits RegistryKeyImpl {
      */
     @ApiStatus.Experimental // Paper - already required for registry builders
     RegistryKey<ItemType> ITEM = create("item");
+    /**
+     * Built-in registry for custom statistics.
+     * @see io.papermc.paper.registry.keys.CustomStatisticKeys
+     */
+    RegistryKey<CustomStatistic> CUSTOM_STAT = create("custom_stat");
+    /**
+     * Built-in registry for statistic types.
+     */
+    RegistryKey<StatisticType<?>> STAT_TYPE = create("stat_type");
 
 
     /* ********************** *
diff --git a/src/main/java/io/papermc/paper/statistic/CustomStatistic.java b/src/main/java/io/papermc/paper/statistic/CustomStatistic.java
new file mode 100644
index 0000000000000000000000000000000000000000..581f79095729075d66192c0c3db8f0ccd0e9b76a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/statistic/CustomStatistic.java
@@ -0,0 +1,94 @@
+package io.papermc.paper.statistic;
+
+import net.kyori.adventure.translation.Translatable;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * Custom statistic types.
+ */
+@ApiStatus.NonExtendable
+public interface CustomStatistic extends Keyed, Translatable {
+
+    Statistic<CustomStatistic> LEAVE_GAME = get("leave_game");
+    Statistic<CustomStatistic> PLAY_TIME = get("play_time");
+    Statistic<CustomStatistic> TOTAL_WORLD_TIME = get("total_world_time");
+    Statistic<CustomStatistic> TIME_SINCE_DEATH = get("time_since_death");
+    Statistic<CustomStatistic> TIME_SINCE_REST = get("time_since_rest");
+    Statistic<CustomStatistic> SNEAK_TIME = get("sneak_time");
+    Statistic<CustomStatistic> WALK_ONE_CM = get("walk_one_cm");
+    Statistic<CustomStatistic> CROUCH_ONE_CM = get("crouch_one_cm");
+    Statistic<CustomStatistic> SPRINT_ONE_CM = get("sprint_one_cm");
+    Statistic<CustomStatistic> WALK_ON_WATER_ONE_CM = get("walk_on_water_one_cm");
+    Statistic<CustomStatistic> FALL_ONE_CM = get("fall_one_cm");
+    Statistic<CustomStatistic> CLIMB_ONE_CM = get("climb_one_cm");
+    Statistic<CustomStatistic> FLY_ONE_CM = get("fly_one_cm");
+    Statistic<CustomStatistic> WALK_UNDER_WATER_ONE_CM = get("walk_under_water_one_cm");
+    Statistic<CustomStatistic> MINECART_ONE_CM = get("minecart_one_cm");
+    Statistic<CustomStatistic> BOAT_ONE_CM = get("boat_one_cm");
+    Statistic<CustomStatistic> PIG_ONE_CM = get("pig_one_cm");
+    Statistic<CustomStatistic> HORSE_ONE_CM = get("horse_one_cm");
+    Statistic<CustomStatistic> AVIATE_ONE_CM = get("aviate_one_cm");
+    Statistic<CustomStatistic> SWIM_ONE_CM = get("swim_one_cm");
+    Statistic<CustomStatistic> STRIDER_ONE_CM = get("strider_one_cm");
+    Statistic<CustomStatistic> JUMP = get("jump");
+    Statistic<CustomStatistic> DROP = get("drop");
+    Statistic<CustomStatistic> DAMAGE_DEALT = get("damage_dealt");
+    Statistic<CustomStatistic> DAMAGE_DEALT_ABSORBED = get("damage_dealt_absorbed");
+    Statistic<CustomStatistic> DAMAGE_DEALT_RESISTED = get("damage_dealt_resisted");
+    Statistic<CustomStatistic> DAMAGE_TAKEN = get("damage_taken");
+    Statistic<CustomStatistic> DAMAGE_BLOCKED_BY_SHIELD = get("damage_blocked_by_shield");
+    Statistic<CustomStatistic> DAMAGE_ABSORBED = get("damage_absorbed");
+    Statistic<CustomStatistic> DAMAGE_RESISTED = get("damage_resisted");
+    Statistic<CustomStatistic> DEATHS = get("deaths");
+    Statistic<CustomStatistic> MOB_KILLS = get("mob_kills");
+    Statistic<CustomStatistic> ANIMALS_BRED = get("animals_bred");
+    Statistic<CustomStatistic> PLAYER_KILLS = get("player_kills");
+    Statistic<CustomStatistic> FISH_CAUGHT = get("fish_caught");
+    Statistic<CustomStatistic> TALKED_TO_VILLAGER = get("talked_to_villager");
+    Statistic<CustomStatistic> TRADED_WITH_VILLAGER = get("traded_with_villager");
+    Statistic<CustomStatistic> EAT_CAKE_SLICE = get("eat_cake_slice");
+    Statistic<CustomStatistic> FILL_CAULDRON = get("fill_cauldron");
+    Statistic<CustomStatistic> USE_CAULDRON = get("use_cauldron");
+    Statistic<CustomStatistic> CLEAN_ARMOR = get("clean_armor");
+    Statistic<CustomStatistic> CLEAN_BANNER = get("clean_banner");
+    Statistic<CustomStatistic> CLEAN_SHULKER_BOX = get("clean_shulker_box");
+    Statistic<CustomStatistic> INTERACT_WITH_BREWINGSTAND = get("interact_with_brewingstand");
+    Statistic<CustomStatistic> INTERACT_WITH_BEACON = get("interact_with_beacon");
+    Statistic<CustomStatistic> INSPECT_DROPPER = get("inspect_dropper");
+    Statistic<CustomStatistic> INSPECT_HOPPER = get("inspect_hopper");
+    Statistic<CustomStatistic> INSPECT_DISPENSER = get("inspect_dispenser");
+    Statistic<CustomStatistic> PLAY_NOTEBLOCK = get("play_noteblock");
+    Statistic<CustomStatistic> TUNE_NOTEBLOCK = get("tune_noteblock");
+    Statistic<CustomStatistic> POT_FLOWER = get("pot_flower");
+    Statistic<CustomStatistic> TRIGGER_TRAPPED_CHEST = get("trigger_trapped_chest");
+    Statistic<CustomStatistic> OPEN_ENDERCHEST = get("open_enderchest");
+    Statistic<CustomStatistic> ENCHANT_ITEM = get("enchant_item");
+    Statistic<CustomStatistic> PLAY_RECORD = get("play_record");
+    Statistic<CustomStatistic> INTERACT_WITH_FURNACE = get("interact_with_furnace");
+    Statistic<CustomStatistic> INTERACT_WITH_CRAFTING_TABLE = get("interact_with_crafting_table");
+    Statistic<CustomStatistic> OPEN_CHEST = get("open_chest");
+    Statistic<CustomStatistic> SLEEP_IN_BED = get("sleep_in_bed");
+    Statistic<CustomStatistic> OPEN_SHULKER_BOX = get("open_shulker_box");
+    Statistic<CustomStatistic> OPEN_BARREL = get("open_barrel");
+    Statistic<CustomStatistic> INTERACT_WITH_BLAST_FURNACE = get("interact_with_blast_furnace");
+    Statistic<CustomStatistic> INTERACT_WITH_SMOKER = get("interact_with_smoker");
+    Statistic<CustomStatistic> INTERACT_WITH_LECTERN = get("interact_with_lectern");
+    Statistic<CustomStatistic> INTERACT_WITH_CAMPFIRE = get("interact_with_campfire");
+    Statistic<CustomStatistic> INTERACT_WITH_CARTOGRAPHY_TABLE = get("interact_with_cartography_table");
+    Statistic<CustomStatistic> INTERACT_WITH_LOOM = get("interact_with_loom");
+    Statistic<CustomStatistic> INTERACT_WITH_STONECUTTER = get("interact_with_stonecutter");
+    Statistic<CustomStatistic> BELL_RING = get("bell_ring");
+    Statistic<CustomStatistic> RAID_TRIGGER = get("raid_trigger");
+    Statistic<CustomStatistic> RAID_WIN = get("raid_win");
+    Statistic<CustomStatistic> INTERACT_WITH_ANVIL = get("interact_with_anvil");
+    Statistic<CustomStatistic> INTERACT_WITH_GRINDSTONE = get("interact_with_grindstone");
+    Statistic<CustomStatistic> TARGET_HIT = get("target_hit");
+    Statistic<CustomStatistic> INTERACT_WITH_SMITHING_TABLE = get("interact_with_smithing_table");
+
+    private static Statistic<CustomStatistic> get(final String key) {
+        return StatisticType.CUSTOM.of(Registry.CUSTOM_STAT.getOrThrow(NamespacedKey.minecraft(key)));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/statistic/Statistic.java b/src/main/java/io/papermc/paper/statistic/Statistic.java
new file mode 100644
index 0000000000000000000000000000000000000000..d0942befce4ff2005af96c8a6253ffdf41f5fb40
--- /dev/null
+++ b/src/main/java/io/papermc/paper/statistic/Statistic.java
@@ -0,0 +1,39 @@
+package io.papermc.paper.statistic;
+
+import org.bukkit.scoreboard.Criteria;
+import org.bukkit.scoreboard.RenderType;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * Represents an individual statistic
+ *
+ * @param <S> stat (one of {@link org.bukkit.entity.EntityType}, {@link org.bukkit.Material} or {@link CustomStatistic}).
+ */
+@ApiStatus.NonExtendable
+public interface Statistic<S> extends Criteria {
+
+    /**
+     * Gets the statistic.
+     *
+     * @return the stat
+     */
+    @NonNull S value();
+
+    /**
+     * Get the stat type.
+     *
+     * @return the stat type
+     */
+    @NonNull StatisticType<S> type();
+
+    @Override
+    default boolean isReadOnly() {
+        return false;
+    }
+
+    @Override
+    default @NonNull RenderType getDefaultRenderType() {
+        return RenderType.INTEGER;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/statistic/StatisticType.java b/src/main/java/io/papermc/paper/statistic/StatisticType.java
new file mode 100644
index 0000000000000000000000000000000000000000..dd3233691ddb25911e08752221e8ac0a2a0856cf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/statistic/StatisticType.java
@@ -0,0 +1,58 @@
+package io.papermc.paper.statistic;
+
+import io.papermc.paper.registry.RegistryKey;
+import net.kyori.adventure.translation.Translatable;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.bukkit.block.BlockType;
+import org.bukkit.entity.EntityType;
+import org.bukkit.inventory.ItemType;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.NonExtendable
+public interface StatisticType<S> extends Keyed, Translatable {
+
+    StatisticType<BlockType> BLOCK_MINED = get("mined");
+    StatisticType<ItemType> ITEM_CRAFTED = get("crafted");
+    StatisticType<ItemType> ITEM_USED = get("used");
+    StatisticType<ItemType> ITEM_BROKEN = get("broken");
+    StatisticType<ItemType> ITEM_PICKED_UP = get("picked_up");
+    StatisticType<ItemType> ITEM_DROPPED = get("dropped");
+    StatisticType<EntityType> ENTITY_KILLED = get("killed");
+    StatisticType<EntityType> ENTITY_KILLED_BY = get("killed_by");
+    StatisticType<CustomStatistic> CUSTOM = get("custom");
+
+    @SuppressWarnings("unchecked")
+    private static <S> StatisticType<S> get(final String key) {
+        return (StatisticType<S>) Registry.STAT_TYPE.getOrThrow(NamespacedKey.minecraft(key));
+    }
+
+    /**
+     * Creates or gets the statistic from this type for the specified value.
+     *
+     * @param value what you want the stat of
+     * @return the statistic for that thing
+     * @throws IllegalArgumentException if the thing is not valid for this {@link StatisticType}
+     */
+    @NonNull Statistic<S> of(@NonNull S value);
+
+    /**
+     * Gets the registry key associated with this stat type.
+     *
+     * @return the registry
+     */
+    @NonNull RegistryKey<S> registryKey();
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * {@link StatisticType#CUSTOM} does <b>NOT</b> have a
+     * translation key.
+     * @throws IllegalArgumentException if used with {@link StatisticType#CUSTOM}
+     * @see CustomStatistic#translationKey()
+     */
+    @Override
+    @NonNull String translationKey();
+}
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 3993fecec5b4c2bbd77e175a168afcad571ce4d1..45b3f272a1ac78f197be8d6ccf0211c4c4763b69 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -287,6 +287,79 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return last seen time
      */
     public long getLastSeen();
+
+    /**
+     * Decrements the given stat for this player.
+     * <p>
+     * This is equivalent to the following code: {@code decrementStatistic(Statistic, 1)}
+     *
+     * @param statistic the stat to decrement
+     * @throws IllegalArgumentException if the stat is invalid OR decreasing the stat value would put the stat below 0
+     */
+    default void decrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic) {
+        this.decrementStatistic(statistic, 1);
+    }
+
+    /**
+     * Increments the given stat for this player.
+     * <p>
+     * This is equivalent to the following code: {@code incrementStatistic(Statistic, 1)}
+     *
+     * @param statistic the stat to increment
+     * @throws IllegalArgumentException if the stat is invalid
+     */
+    default void incrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic) {
+        this.incrementStatistic(statistic, 1);
+    }
+
+    /**
+     * Decrements the given stat for this player.
+     *
+     * @param statistic the stat to decrement
+     * @param amount the value to decrement by
+     * @throws IllegalArgumentException if the stat is invalid, the amount is nonpositive, or the stat
+     * would have a negative value after decrementing it
+     */
+    default void decrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic, int amount) {
+        this.incrementStatistic(statistic, -amount);
+    }
+
+    /**
+     * Increments the given stat for this player.
+     *
+     * @param statistic the stat to increment
+     * @param amount the amount to increment by
+     * @throws IllegalArgumentException if the stat is invalid or the amount is nonpositive
+     */
+    public void incrementStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic, int amount);
+
+    /**
+     * Sets the given stat for this player.
+     *
+     * @param statistic the stat to set
+     * @param newAmount the value to set the stat to
+     * @throws IllegalArgumentException if the stat is invalid or the amount is negative
+     */
+    public void setStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic, int newAmount);
+
+    /**
+     * Gets the given stat for this player.
+     *
+     * @param statistic the stat to get
+     * @return the amount for the stat
+     * @throws IllegalArgumentException if the stat is invalid
+     */
+    public int getStatistic(@NotNull io.papermc.paper.statistic.Statistic<?> statistic);
+
+    /**
+     * Get the formatted value for this stat. This is how the stat might
+     * appear in the client's statistic window
+     *
+     * @param statistic the stat to get the formatted value for
+     * @return the formatted value
+     * @throws IllegalArgumentException if the stat is invalid
+     */
+    public @NotNull String getFormattedValue(@NotNull io.papermc.paper.statistic.Statistic<?> statistic);
     // Paper end
 
     /**
@@ -308,7 +381,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void incrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
@@ -321,7 +396,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void decrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
@@ -333,7 +410,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void incrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
@@ -345,7 +424,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void decrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
@@ -357,7 +438,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #setStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void setStatistic(@NotNull Statistic statistic, int newValue) throws IllegalArgumentException;
 
     /**
@@ -368,7 +451,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
+     * @deprecated use {@link #getStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public int getStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
@@ -383,7 +468,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
@@ -398,7 +485,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
@@ -411,7 +500,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #getStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public int getStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
@@ -425,7 +516,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
 
     /**
@@ -439,7 +532,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
 
     /**
@@ -453,7 +548,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #setStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void setStatistic(@NotNull Statistic statistic, @NotNull Material material, int newValue) throws IllegalArgumentException;
 
     /**
@@ -468,7 +565,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
@@ -483,7 +582,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
@@ -496,7 +597,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #getStatistic(io.papermc.paper.statistic.Statistic)}
      */
+    @Deprecated(since = "1.21") // Paper
     public int getStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
@@ -510,7 +613,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #incrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount) throws IllegalArgumentException;
 
     /**
@@ -524,7 +629,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #decrementStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount);
 
     /**
@@ -538,7 +645,9 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
+     * @deprecated use {@link #setStatistic(io.papermc.paper.statistic.Statistic, int)}
      */
+    @Deprecated(since = "1.21") // Paper
     public void setStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int newValue);
 
     /**
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 20015393f91af405c99db2635a471fb6ff19e4bf..21d4ed2ca8e27ea39b727b7e47f43ef1c5c85c65 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -199,7 +199,9 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Server statistics.
      *
      * @see Statistic
+     * @deprecated use {@link #CUSTOM_STAT} and {@link #STAT_TYPE}
      */
+    @Deprecated(forRemoval = true, since = "1.21") // Paper
     Registry<Statistic> STATISTIC = new SimpleRegistry<>(Statistic.class);
     /**
      * Server structures.
@@ -350,6 +352,23 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
         }
     };
     // Paper end - potion effect type registry
+
+    // Paper start - stat registries
+    /**
+     * Custom statistics
+     *
+     * @see io.papermc.paper.statistic.CustomStatistic
+     */
+    Registry<io.papermc.paper.statistic.CustomStatistic> CUSTOM_STAT = io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(io.papermc.paper.registry.RegistryKey.CUSTOM_STAT);
+
+    /**
+     * Statistic types
+     *
+     * @see io.papermc.paper.statistic.StatisticType
+     */
+    Registry<io.papermc.paper.statistic.StatisticType<?>> STAT_TYPE = io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(io.papermc.paper.registry.RegistryKey.STAT_TYPE);
+    // Paper end - stat registries
+
     /**
      * Get the object by its key.
      *
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 4ce888688d04eb0c4b2261a6474df870e7d2bb00..7d95d3f4e9eb2c3b25e5e05dc2fd765622b6009d 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -5,7 +5,9 @@ import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a countable statistic, which is tracked by the server.
+ * @deprecated use {@link io.papermc.paper.statistic.StatisticType} and {@link io.papermc.paper.statistic.Statistic}
  */
+@Deprecated(since = "1.21") // Paper
 public enum Statistic implements Keyed {
     DAMAGE_DEALT,
     DAMAGE_TAKEN,
@@ -152,7 +154,9 @@ public enum Statistic implements Keyed {
     /**
      * The type of statistic.
      *
+     * @deprecated use {@link io.papermc.paper.statistic.StatisticType}
      */
+    @Deprecated(since = "1.21") // Paper
     public enum Type {
         /**
          * Statistics of this type do not require a qualifier.
@@ -174,4 +178,67 @@ public enum Statistic implements Keyed {
          */
         ENTITY;
     }
+    // Paper start - add legacy conversion methods
+    @Deprecated(forRemoval = true)
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static Statistic toLegacy(final io.papermc.paper.statistic.Statistic<?> stat) {
+        if (stat.type() == io.papermc.paper.statistic.StatisticType.CUSTOM && stat.value() instanceof final io.papermc.paper.statistic.CustomStatistic customStatistic) {
+            if (customStatistic == io.papermc.paper.statistic.CustomStatistic.PLAY_TIME) { // special case cause upstream is wrong
+                return org.bukkit.Statistic.PLAY_ONE_MINUTE;
+            } else {
+                return java.util.Objects.requireNonNull(org.bukkit.Registry.STATISTIC.get(customStatistic.getKey()), "Couldn't convert " + stat + " to a legacy stat");
+            }
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.BLOCK_MINED) {
+            return Statistic.MINE_BLOCK;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_BROKEN) {
+            return Statistic.BREAK_ITEM;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_CRAFTED) {
+            return Statistic.CRAFT_ITEM;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_DROPPED) {
+            return Statistic.DROP;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_USED) {
+            return Statistic.USE_ITEM;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ITEM_PICKED_UP) {
+            return Statistic.PICKUP;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ENTITY_KILLED) {
+            return Statistic.KILL_ENTITY;
+        } else if (stat.type() == io.papermc.paper.statistic.StatisticType.ENTITY_KILLED_BY) {
+            return Statistic.ENTITY_KILLED_BY;
+        }
+        throw new IllegalArgumentException("Couldn't convert " + stat + " to a legacy stat");
+    }
+
+    @Deprecated(forRemoval = true)
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public io.papermc.paper.statistic.Statistic<?> toModern(@org.jetbrains.annotations.Nullable org.bukkit.entity.EntityType entityType, @org.jetbrains.annotations.Nullable Material material) {
+        com.google.common.base.Preconditions.checkArgument(entityType == null || material == null, "No stat has an entity type and material value at the same time");
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.UNTYPED || (entityType == null && material == null), "no value needed for untyped stats");
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.ENTITY || entityType != null);
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.BLOCK || material != null && material.isBlock());
+        com.google.common.base.Preconditions.checkArgument(this.type != Type.ITEM || material != null && material.isItem());
+        return switch (this.type) {
+            case UNTYPED -> {
+                if (this == PLAY_ONE_MINUTE) { // special case cause upstream is wrong
+                    yield io.papermc.paper.statistic.CustomStatistic.PLAY_TIME;
+                } else {
+                    yield io.papermc.paper.statistic.StatisticType.CUSTOM.of(java.util.Objects.requireNonNull(Registry.CUSTOM_STAT.get(this.key), "Couldn't convert " + this + " to a modern stat"));
+                }
+            }
+            case BLOCK -> io.papermc.paper.statistic.StatisticType.BLOCK_MINED.of(java.util.Objects.requireNonNull(material.asBlockType()));
+            case ITEM -> switch (this) {
+                case DROP -> io.papermc.paper.statistic.StatisticType.ITEM_DROPPED.of(java.util.Objects.requireNonNull(material.asItemType()));
+                case BREAK_ITEM -> io.papermc.paper.statistic.StatisticType.ITEM_BROKEN.of(java.util.Objects.requireNonNull(material.asItemType()));
+                case CRAFT_ITEM -> io.papermc.paper.statistic.StatisticType.ITEM_CRAFTED.of(java.util.Objects.requireNonNull(material.asItemType()));
+                case USE_ITEM -> io.papermc.paper.statistic.StatisticType.ITEM_USED.of(java.util.Objects.requireNonNull(material.asItemType()));
+                case PICKUP -> io.papermc.paper.statistic.StatisticType.ITEM_PICKED_UP.of(java.util.Objects.requireNonNull(material.asItemType()));
+                default -> throw new IllegalArgumentException("Couldn't convert " + this + ", mat: " + material + " to a modern stat");
+            };
+            case ENTITY -> switch (this) {
+                case KILL_ENTITY -> io.papermc.paper.statistic.StatisticType.ENTITY_KILLED.of(entityType);
+                case ENTITY_KILLED_BY -> io.papermc.paper.statistic.StatisticType.ENTITY_KILLED_BY.of(entityType);
+                default -> throw new IllegalArgumentException("Couldn't convert " + this + ", entity_type: " + entityType + " to a modern stat");
+            };
+        };
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
index 3fbcb0ecdacd63cb6ec9fd6174d5e3ac3c095de1..f4c991182ebeb703a011297a1e4bc1836410e430 100644
--- a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
@@ -20,58 +20,46 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    protected final Statistic statistic;
+    private final io.papermc.paper.statistic.Statistic<?> statistic; // Paper
     private final int initialValue;
     private final int newValue;
     private boolean isCancelled = false;
+    @Deprecated(forRemoval = true) // Paper
     private final EntityType entityType;
+    @Deprecated(forRemoval = true) // Paper
     private final Material material;
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue) {
+    // Paper start
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull io.papermc.paper.statistic.Statistic<?> statistic, int initialValue, int newValue) {
         super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
         this.newValue = newValue;
-        this.entityType = null;
-        this.material = null;
+        this.entityType = statistic.value() instanceof EntityType entityType ? entityType : null;
+        this.material = statistic.value() instanceof Material material ? material : null;
     }
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull EntityType entityType) {
-        super(player);
-        this.statistic = statistic;
-        this.initialValue = initialValue;
-        this.newValue = newValue;
-        this.entityType = entityType;
-        this.material = null;
-    }
-
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull Material material) {
-        super(player);
-        this.statistic = statistic;
-        this.initialValue = initialValue;
-        this.newValue = newValue;
-        this.entityType = null;
-        if (material != null && material.isLegacy()) {
-            if (statistic.getType() == Statistic.Type.BLOCK) {
-                material = Bukkit.getUnsafe().fromLegacy(new MaterialData(material), false);
-            } else if (statistic.getType() == Statistic.Type.ITEM) {
-                material = Bukkit.getUnsafe().fromLegacy(new MaterialData(material), true);
-            } else {
-                // Theoretically, this should not happen, can probably print a warning, but for now it should be fine.
-                material = Bukkit.getUnsafe().fromLegacy(new MaterialData(material), false);
-            }
-        }
-        this.material = material;
+    /**
+     * Gets the statistic that is being incremented.
+     *
+     * @return the incremented statistic
+     */
+    public @NotNull io.papermc.paper.statistic.Statistic<?> getStat() {
+        return this.statistic;
     }
+    // Paper end
 
     /**
      * Gets the statistic that is being incremented.
      *
      * @return the incremented statistic
+     * @deprecated use {@link #getStat()}
      */
     @NotNull
+    @Deprecated(since = "1.21") // Paper
     public Statistic getStatistic() {
-        return statistic;
+        return Statistic.toLegacy(this.statistic); // Paper
     }
 
     /**
@@ -97,8 +85,10 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
      * entity statistic otherwise returns null.
      *
      * @return the EntityType of the statistic
+     * @deprecated use {@link #getStat()}
      */
     @Nullable
+    @Deprecated(since = "1.21") // Paper
     public EntityType getEntityType() {
         return entityType;
     }
@@ -108,8 +98,10 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
      * or item statistic otherwise returns null.
      *
      * @return the Material of the statistic
+     * @deprecated use {@link #getStat()}
      */
     @Nullable
+    @Deprecated(since = "1.21") // Paper
     public Material getMaterial() {
         return material;
     }
diff --git a/src/main/java/org/bukkit/scoreboard/Criteria.java b/src/main/java/org/bukkit/scoreboard/Criteria.java
index 3bc3abaf093d13e22b6ac2ee59ab584c92b4666a..acfdeef0c0fa465d175007503439943fa866e256 100644
--- a/src/main/java/org/bukkit/scoreboard/Criteria.java
+++ b/src/main/java/org/bukkit/scoreboard/Criteria.java
@@ -12,8 +12,8 @@ import org.jetbrains.annotations.NotNull;
  * Represents a scoreboard criteria, either custom or built-in to the Minecraft server, used to
  * keep track of and manually or automatically change scores on a scoreboard.
  * <p>
- * While this class outlines constants for standard criteria, see {@link #statistic(Statistic)}
- * (and its overloads) to create instances for statistically-backed criteria.
+ * While this class outlines constants for standard criteria, see {@link io.papermc.paper.statistic.Statistic}
+ * for statistically-backed criteria.
  */
 public interface Criteria {
 
@@ -241,8 +241,10 @@ public interface Criteria {
      * {@link Material#isBlock()} is false
      * @throws IllegalArgumentException if {@link Statistic#getType()} is {@link Type#ITEM}, but
      * {@link Material#isItem()} is false
+     * @deprecated use {@link io.papermc.paper.statistic.Statistic}
      */
     @NotNull
+    @Deprecated(since = "1.21") // Paper
     public static Criteria statistic(@NotNull Statistic statistic, @NotNull Material material) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         Preconditions.checkArgument(material != null, "material must not be null");
@@ -298,8 +300,10 @@ public interface Criteria {
      * @param entityType the relevant entity type
      * @return the criteria
      * @throws IllegalArgumentException if {@link Statistic#getType()} is not {@link Type#ENTITY}
+     * @deprecated use {@link io.papermc.paper.statistic.Statistic}
      */
     @NotNull
+    @Deprecated(since = "1.21") // Paper
     public static Criteria statistic(@NotNull Statistic statistic, @NotNull EntityType entityType) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         Preconditions.checkArgument(entityType != null, "entityType must not be null");
@@ -331,8 +335,10 @@ public interface Criteria {
      *
      * @param statistic the statistic for which to get a criteria
      * @return the criteria
+     * @deprecated Use {@link io.papermc.paper.statistic.Statistic}
      */
     @NotNull
+    @Deprecated(since = "1.21") // Paper
     public static Criteria statistic(@NotNull Statistic statistic) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         return Bukkit.getScoreboardCriteria(org.bukkit.Bukkit.getUnsafe().getStatisticCriteriaKey(statistic)); // Paper
